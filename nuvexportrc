#
# nuvexportrc:
#
#  This file contains the configuration for nuvexport, and should be installed
#    as /etc/nuvexportrc.  You can also copy this file to ~/.nuvexportrc, where
#    nuvexport will look first, if you wish to create settings local to a
#    specific user.
#
#  support for nuvexportrc is still new, so expect that more default options
#    will be added as time goes on (so you'll know what you can edit).  In the
#    meantime, you can poke around in the code for add_arg() calls to see which
#    options are available.
#

#
#  Anything placed within the <nuvexport> section will be interpreted
#    as a global option.  Use this section for options that don't relate
#    specifically to any particular exporter.
#
<nuvexport>

#
#  Set export_prog to ffmpeg, transcode or mencoder, depending on your
#    preference of program for exports.  This is equivalent to --ffmpeg,
#    --transcode or --mencoder
#
    export_prog=ffmpeg

#
#  Any other parameters set in this file are equivalent to using the equivalent
#    setting as a commandline option.  For boolean options like --deinterlace
#    (--nodeinterlace), use deinterlace=yes (or no, true or false) instead.
#    Actual commandline options will override anything in this file.
#

#
#  Preferred mode -- if you don't set this, nuvexport will ask you what you
#    would like to do.  Use --mode or any of the mode symlinks (like
#    nuvexport-xvid) to override.
#
#    mode=xvid

#
#  Setting underscores to yes will convert whitespace in filenames to an
#    underscore character (which some people seem to prefer)
#
    underscores=no

#
#  Setting require_cutlist to yes will tell nuvexport to show only those
#    recordings that have a cutlist
#
#    require_cutlist=no

#
#  By default, nuvexport picks what it thinks is a good name for your file
#    (doing its best to avoid printing "Untitled" into the filename).  Setting
#    name will let you change the output format of the filename generated by
#    nuvexport.  Even after this formatting, nuvexport will still do some basic
#    replacements to make sure that illegal filename characters (eg. /\:*?<>|)
#    are replaced with a dash (or " with a ').  The following format variables
#    are supported:
#
#    %f -> full path to the filename
#    %c -> the chanid of the show
#    %a -> start time in YYYYMMDDHHMMSS format
#    %b -> end time in YYYYMMDDHHMMSS format
#    %t -> title (show name)
#    %s -> subtitle (episode name)
#    %h -> hostname where the file resides
#    %m -> showtime in human-readable format (see --date below)
#    %d -> description
#    %% -> a % character
#
#    filename=%t - %s

#
#  By default, nuvexport uses an American-style date to represent showtimes in
#    lists and filenames.  Use --date to override that with the format of your
#    choosing.  See the UnixDate section `perldoc Date::Manip` for formatting
#    options.
#
#    date=%m/%d, %i:%M %p

#
#  Nuvexport has the option to crop a percentage of the border of each recording
#  in order to get rid of the unsightly edges of the tv signal.  The default 2%
#  approximates the overscan of an average TV, but you can alter this from 0 to
#  5% to fit your preferences.  Please keep in mind that this amount is removed
#  prior to making any aspect conversions like removing black bars from 4:3
#  recordings to make a 16:9 export.
#
    crop_pct = 1.5

#
#  Alternatively, you can override the general crop_pct to crop a different
#  amount from specific sides of the recording.
#
#   crop_top    = 2
#   crop_right  = 2
#   crop_bottom = 2
#   crop_left   = 2

</nuvexport>

#
#  The sections below work as above, with each more specific section overriding
#    the more generic.
#

<generic>

#
# Default to export to the current directory
#
    path = /home/xris/Video

#
# Use the cutlist (not to be confused with the commercial flag list) when
#    exporting.
#
    use_cutlist = yes

#
# Tell mythcommflag to generate a cutlist from the commercial flags before
#    exporting.  Don't forget to enable use_cutlist above, too.
#
#   gencutlist = no

#
# Contrary to popular belief, enabling multipass will not make your recordings
#    look better.  What it will do, however is guarantee that the bitrate you
#    choose will be the average bitrate of your entire encode (meaning that your
#    exports will end up being about the same size per-minute), and that you
#    will receive the best overall quality for a files of the same size.
#
    multipass = yes

#
# Disabling noise reduction can speed up your exports dramatically, but at the
#    expense of some quality.  You can also access this on the commandline via
#    the --denoise (or --nodenoise) flag.
#
    noise_reduction = no

#
# Deinterlace the video so that it looks better on software players.
#
    deinterlace     = yes

#
# Crop about 2% from the border of the recording before encoding.  This is done
#    to get rid of part of the broadcast signal that is usually obscured by the
#    tv's overscan.
#
    crop = yes

#
#  You can create settings for each export module type.  These are the
#    second-most generic sections, and will only be reached if there are no
#    matches in the full or generic module names.
#
#  If you have a particularly dirty signal, you might want to try to disable
#    fast_denoise (it's actually part of yuvdenoise, which both the ffmpeg
#    and transcode exporters call).  It can be almost twice as slow as the
#    default "fast" normal noise reduction, but it considerably more effective.
#    The latest version of yuvdenoise (which is called directly by the ffmpeg
#    exporters) does not support this option, so it is ignored in that case.
#
    fast_denoise = yes

#
#  If nuvexport is having trouble detecting the *input* aspect ratio of your
#    recordings (MythTV used to hard-code all software-encoded files as 1:1
#    regardless of the true aspect), set this option to one of the following:
#
#   force_aspect = [ 1:1 4:3 16:9 2.21:1 ]

</generic>

<ffmpeg>
#
#  ffmpeg is almost twice as fast if you disable noise reduction
#
#    noise_reduction = no
#
#  By default, nuvexport's ffmpeg module lets ffmpeg handle deinterlacing.
#    I've found that this provides the best results, but if you wish to let
#    yuvdenoise do it instead, set deint_in_yuvdenoise to a true value.
#
#    deint_in_yuvdenoise = no
#
</ffmpeg>

<transcode>

#
#  Mythtranscode will always be used for nupplevideo recordings because
#    transcode can't read them, but setting force_mythtranscode to yes will
#    force nuvexport to call mythtranscode when using the transcode exporter for
#    mpeg recordings, too.  This may help problems that some people have been
#    having with transcode not recognizing certain dvb recordings, as well as
#    transcode not working properly on certain ivtv recordings.
#
    force_mythtranscode = yes

#
#  Setting both force_mythtranscode and mythtranscode_cutlist to yes will tell
#    nuvexport to use mythtranscode's built-in cutlist functions, rather than
#    having transcode use its own.  I've found that the cutlists for a handful
#    of ivtv recordings that do not work properly with transcode's internal
#    cutlist handler.
#
    mythtranscode_cutlist = yes

</transcode>

<mencoder>
</mencoder>

#
#  You can also create settings for generic export module names.  These will
#    only be overridden by full module names.
#

<XviD>

    vbr          = yes   # Enable vbr to get the multipass/quantisation options
                         # (enabling multipass or quantisation automatically enables vbr)
    multipass    = yes   # You get either multipass or quantisation; multipass will override
    quantisation = 6     # 4 through 6 is probably right...  1..31 are allowed (lower is better quality)

    a_bitrate    = 128   # Audio bitrate of 128 kbps
    v_bitrate    = 768   # Remember, quantisation overrides video bitrate

    width        = 512   # Height adjusts automatically to width, according to aspect ratio
    height       = auto

</XviD>

#
#  Default mp3 bitrate is 128
#
<MP3>
    bitrate = 128
</MP3>

#
#  If you want to provide settings for a very specific export module, you can
#    use its full name, and it will override any more generic settings.
#

<ffmpeg::PSP>

# PSP framerate (high=29.97, low=14.985)
    psp_fps = low

# PSP resolution (320x240, 368x208 or 400x192)
    psp_resolution = 320x240

# PSP video bitrate (high=768, low=384)
    psp_bitrate = high

# Create a thumbnail to go with the PSP video export?
    psp_thumbnail = yes

</ffmpeg::PSP>

<ffmpeg::MP4>

# Codec to use (xvid or h264).  Please note that h264 support is experimental.
# I have not yet been able to export a file using h264 that actuall works,
# despite the fact that I've tried my best to copy the ffmpeg parameters from
# iSquint, which does work.
    mp4_codec = h264

    noise_reduction = no
    deinterlace     = yes
    multipass       = yes
    v_bitrate       = 768
    a_bitrate       = 128

    width        = 528
    height       = 480

# Framerate to use:  auto, 25, 23.97, 29.97.  PAL will always be 25 fps, and
# auto will set 29.97 for everything over 320x288 and 23.97 for the rest.
    mp4_fps = auto

</ffmpeg::MP4>

#
# You can also make specific profiles called with the --profile parameter that
# will override other config options (but not commandline arguments).
#
# For example, you could make a profile that would encode your favorite show
# with your favorite settings.
#
<profile::bourdain>

    title       = bourdain

    export_prog = ffmpeg
    mode        = mp4

    crop_pct    = 0
    crop_right  = 1.5
    crop_left   = 1.5

    width        = 528
    height       = 480

</profile::bourdain>

<profile::follow>

    title       = follow that

    export_prog = ffmpeg
    mode        = mp4

    crop_pct = 0

    width  = 352
    height = 480

    # The episodes all say "follow that" at the beginning
    filename=%s

</profile::follow>

<profile::goodeats>

    title       = good eats

    export_prog = ffmpeg
    mode        = mp4

    crop_pct    = 0
    crop_top    = 1
    crop_right  = 1
    crop_left   = 1

    width        = 528
    height       = 480

</profile::goodeats>

<profile::iron>

    title       = iron chef

    export_prog = ffmpeg
    mode        = mp4

    crop_pct    = 0
    crop_top    = 1
    crop_left   = 1

    width        = 528
    height       = 480

</profile::iron>

<profile::greg>

    title       = greg the

    export_prog = ffmpeg
    mode        = mp4

    crop_pct    = 0
    crop_left   = 1

    width        = 528
    height       = 480

</profile::greg>
